pipeline {
    agent any

    environment {
        HELM_RELEASE = "petclinic"
        HELM_CHART_PATH = "./k8s/chart"
        K8S_NAMESPACE = "dev-review"
        GIT_REPO_API = "https://api.github.com/repos/your-github-org/spring-petclinic-" // prefix repo URL, append service name
    }

    parameters {
        choice(name: 'ACTION', choices: ['Deploy', 'Undeploy'], description: 'Choose action: Deploy or Undeploy')

        string(name: 'API_GATEWAY_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-api-gateway')
        string(name: 'ADMIN_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-admin-server')
        string(name: 'CONFIG_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-config-server')
        string(name: 'DISCOVERY_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-discovery-server')
        string(name: 'CUSTOMERS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-customers-service')
        string(name: 'VISITS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-visits-service')
        string(name: 'VETS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-vets-service')
        string(name: 'GENAI_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-genai-service')
    }

    stages {
        stage('Print Configuration') {
            steps {
                echo "Selected Action: ${params.ACTION}"
                echo "Branches chosen:"
                echo "ADMIN_SERVER_BRANCH = ${params.ADMIN_SERVER_BRANCH}"
                echo "API_GATEWAY_BRANCH = ${params.API_GATEWAY_BRANCH}"
                echo "CONFIG_SERVER_BRANCH = ${params.CONFIG_SERVER_BRANCH}"
                echo "DISCOVERY_SERVER_BRANCH = ${params.DISCOVERY_SERVER_BRANCH}"
                echo "CUSTOMERS_SERVICE_BRANCH = ${params.CUSTOMERS_SERVICE_BRANCH}"
                echo "GENAI_SERVICE_BRANCH = ${params.GENAI_SERVICE_BRANCH}"
                echo "VETS_SERVICE_BRANCH = ${params.VETS_SERVICE_BRANCH}"
                echo "VISITS_SERVICE_BRANCH = ${params.VISITS_SERVICE_BRANCH}"
            }
        }

        stage('Resolve Commit IDs for Branches') {
            when {
                expression { params.ACTION == 'Deploy' }
            }
            steps {
                script {
                    def services = [
                        apiGateway: ['repoName': 'api-gateway', 'branch': params.API_GATEWAY_BRANCH],
                        adminServer: ['repoName': 'admin-server', 'branch': params.ADMIN_SERVER_BRANCH],
                        configServer: ['repoName': 'config-server', 'branch': params.CONFIG_SERVER_BRANCH],
                        discoveryServer: ['repoName': 'discovery-server', 'branch': params.DISCOVERY_SERVER_BRANCH],
                        customersService: ['repoName': 'customers-service', 'branch': params.CUSTOMERS_SERVICE_BRANCH],
                        genaiService: ['repoName': 'genai-service', 'branch': params.GENAI_SERVICE_BRANCH],
                        vetsService: ['repoName': 'vets-service', 'branch': params.VETS_SERVICE_BRANCH],
                        visitsService: ['repoName': 'visits-service', 'branch': params.VISITS_SERVICE_BRANCH],
                    ]

                    // Hàm lấy commit ID mới nhất của branch qua GitHub API
                    def getCommitId = { repoName, branch ->
                        def apiUrl = "${env.GIT_REPO_API}${repoName}/commits/${branch}"
                        echo "Query commit ID from: ${apiUrl}"
                        def response = sh(script: "curl -s ${apiUrl}", returnStdout: true).trim()
                        def json = readJSON text: response
                        return json.sha ?: error("Cannot get commit ID for ${repoName} branch ${branch}")
                    }

                    // Lấy commit IDs cho từng service
                    def commitTags = [:]
                    for (svc in services.keySet()) {
                        def repoName = services[svc]['repoName']
                        def branch = services[svc]['branch']?.trim()
                        if (!branch) branch = 'main' // fallback default
                        def commitId = getCommitId(repoName, branch)
                        echo "Service ${svc} (${repoName}) branch '${branch}' commitId: ${commitId}"
                        commitTags[svc] = commitId
                    }

                    // Save commitTags to env for later use
                    env.HELM_SET_PARAMS = [
                        "admin-server.image.tag=${commitTags.adminServer}",
                        "api-gateway.image.tag=${commitTags.apiGateway}",
                        "config-server.image.tag=${commitTags.configServer}",
                        "discovery-server.image.tag=${commitTags.discoveryServer}",
                        "customers-service.image.tag=${commitTags.customersService}",
                        "genai-service.image.tag=${commitTags.genaiService}",
                        "vets-service.image.tag=${commitTags.vetsService}",
                        "visits-service.image.tag=${commitTags.visitsService}"
                    ].join(',')
                    echo "Resolved Helm set params: ${env.HELM_SET_PARAMS}"
                }
            }
        }

        stage('Deploy or Undeploy') {
            steps {
                script {
                    if (params.ACTION == 'Deploy') {
                        sh """
                            helm upgrade --install ${env.HELM_RELEASE} ${env.HELM_CHART_PATH} \
                            --namespace ${env.K8S_NAMESPACE} --create-namespace \
                            --set ${env.HELM_SET_PARAMS}
                        """

                        echo "Waiting 30 seconds for services to become ready..."
                        sleep 30

                        echo "Fetching NodePort services in namespace ${env.K8S_NAMESPACE}..."
                        sh """
                            kubectl get svc -n ${env.K8S_NAMESPACE} -o json | jq -r '
                            .items[] | select(.spec.type=="NodePort") | 
                            "\(.metadata.name): NodePort(s) = \(.spec.ports[]?.nodePort // "none")"
                            '
                        """
                        echo "Developer should map these NodePorts with your cluster's Worker node IP in your hosts file to test."
                    } else {
                        sh """
                            helm uninstall ${env.HELM_RELEASE} --namespace ${env.K8S_NAMESPACE} || true
                        """
                    }
                }
            }
        }

        stage('Docker Cleanup') {
            steps {
                sh '''
                    echo "[Docker cleanup]"
                    docker logout || true
                    docker system prune -af || true
                '''
            }
        }
    }
}
