pipeline {
    agent any

    environment {
        HELM_RELEASE = "petclinic"
        HELM_CHART_REPO = "https://github.com/HCMUS-DevOps-Projects/project02-k8s.git"
        HELM_CHART_DIR = "charts" // thư mục chứa Helm chart sau khi clone (có thể để là '.' nếu Helm chart nằm ở root repo)
        DEFAULT_NAMESPACE_PREFIX = "dev-review"

        GIT_REPO_CODE = "https://github.com/HCMUS-DevOps-Projects/project02.git"
        DOCKER_USER = "tlvu2004" // bạn có thể thay thế hoặc lấy từ credential
    }

    parameters {
        choice(name: 'ACTION', choices: ['Deploy', 'Undeploy'], description: 'Choose action: Deploy or Undeploy')
        string(name: 'DEPLOY_NAMESPACE', defaultValue: '', description: 'Namespace for deployment (if empty, auto generate)')

        string(name: 'API_GATEWAY_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-api-gateway')
        string(name: 'ADMIN_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-admin-server')
        string(name: 'CONFIG_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-config-server')
        string(name: 'DISCOVERY_SERVER_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-discovery-server')
        string(name: 'CUSTOMERS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-customers-service')
        string(name: 'VISITS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-visits-service')
        string(name: 'VETS_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-vets-service')
        string(name: 'GENAI_SERVICE_BRANCH', defaultValue: 'main', description: 'Branch for spring-petclinic-genai-service')
    }

    stages {
        stage('Clone Helm Chart') {
            steps {
                sh "rm -rf helm-chart && git clone ${env.HELM_CHART_REPO} helm-chart"
            }
        }

        stage('Print Configuration') {
            steps {
                echo "Selected Action: ${params.ACTION}"
                echo "Namespace: ${params.DEPLOY_NAMESPACE ?: 'Will auto-generate'}"
                echo "Branches chosen:"
                echo "ADMIN_SERVER_BRANCH = ${params.ADMIN_SERVER_BRANCH}"
                echo "API_GATEWAY_BRANCH = ${params.API_GATEWAY_BRANCH}"
                echo "CONFIG_SERVER_BRANCH = ${params.CONFIG_SERVER_BRANCH}"
                echo "DISCOVERY_SERVER_BRANCH = ${params.DISCOVERY_SERVER_BRANCH}"
                echo "CUSTOMERS_SERVICE_BRANCH = ${params.CUSTOMERS_SERVICE_BRANCH}"
                echo "GENAI_SERVICE_BRANCH = ${params.GENAI_SERVICE_BRANCH}"
                echo "VETS_SERVICE_BRANCH = ${params.VETS_SERVICE_BRANCH}"
                echo "VISITS_SERVICE_BRANCH = ${params.VISITS_SERVICE_BRANCH}"
            }
        }

        stage('Set Namespace') {
            steps {
                script {
                    // Nếu user không nhập namespace, tạo tên namespace tự động: dev-review-<BUILD_ID>
                    if (!params.DEPLOY_NAMESPACE?.trim()) {
                        env.DEPLOY_NAMESPACE = "${env.DEFAULT_NAMESPACE_PREFIX}-${env.BUILD_ID}"
                    } else {
                        env.DEPLOY_NAMESPACE = params.DEPLOY_NAMESPACE.trim()
                    }
                    echo "Using namespace: ${env.DEPLOY_NAMESPACE}"
                }
            }
        }

        stage('Handle Deploy or Undeploy') {
            steps {
                script {
                    if (params.ACTION == 'Undeploy') {
                        echo "Deleting namespace ${env.DEPLOY_NAMESPACE}..."
                        sh "kubectl delete namespace ${env.DEPLOY_NAMESPACE} --ignore-not-found"
                        return
                    }

                    // ACTION == Deploy tiếp tục xử lý deploy
                    def services = [
                        apiGateway: ['repoName': 'api-gateway', 'branch': params.API_GATEWAY_BRANCH, 'helmName': 'spring-petclinic-api-gateway'],
                        adminServer: ['repoName': 'admin-server', 'branch': params.ADMIN_SERVER_BRANCH, 'helmName': 'spring-petclinic-admin-server'],
                        configServer: ['repoName': 'config-server', 'branch': params.CONFIG_SERVER_BRANCH, 'helmName': 'spring-petclinic-config-server'],
                        discoveryServer: ['repoName': 'discovery-server', 'branch': params.DISCOVERY_SERVER_BRANCH, 'helmName': 'spring-petclinic-discovery-server'],
                        customersService: ['repoName': 'customers-service', 'branch': params.CUSTOMERS_SERVICE_BRANCH, 'helmName': 'spring-petclinic-customers-service'],
                        genaiService: ['repoName': 'genai-service', 'branch': params.GENAI_SERVICE_BRANCH, 'helmName': 'spring-petclinic-genai-service'],
                        vetsService: ['repoName': 'vets-service', 'branch': params.VETS_SERVICE_BRANCH, 'helmName': 'spring-petclinic-vets-service'],
                        visitsService: ['repoName': 'visits-service', 'branch': params.VISITS_SERVICE_BRANCH, 'helmName': 'spring-petclinic-visits-service'],
                    ]

                    // Tạo namespace nếu chưa có
                    sh "kubectl get namespace ${env.DEPLOY_NAMESPACE} || kubectl create namespace ${env.DEPLOY_NAMESPACE}"

                    // Hàm lấy commit ID mới nhất của branch qua GitHub API
                    def getCommitId = { branch ->
                        def apiUrl = "${env.GIT_REPO_CODE}/commits/${branch}".replace("https://github.com", "https://api.github.com/repos")
                        echo "Query commit ID from: ${apiUrl}"
                        def response = sh(script: "curl -s ${apiUrl}", returnStdout: true).trim()
                        def json = readJSON text: response
                        return json.sha ?: error("Cannot get commit ID for branch ${branch}")
                    }

                    // Map serviceName -> imageTag
                    def imageTags = [:]

                    // Lấy tag cho từng service: nếu branch = main thì tag = latest; else lấy commit id
                    for (svc in services.keySet()) {
                        def repoName = services[svc]['repoName']
                        def branch = services[svc]['branch']?.trim()
                        if (!branch) {
                            branch = 'main'
                        }

                        if (branch == 'main') {
                            imageTags[svc] = 'latest'
                        } else {
                            def commitId = getCommitId(branch)
                            imageTags[svc] = commitId.substring(0, 7) // rút gọn commit id 7 ký tự
                        }
                    }

                    echo "Image tags to deploy: ${imageTags}"

                    // Deploy từng service với helm, truyền namespace, release name (tên release có thể đặt theo svc + namespace để tránh trùng)
                    for (svc in services.keySet()) {
                        def helmReleaseName = "${env.HELM_RELEASE}-${svc}-${env.DEPLOY_NAMESPACE}"
                        def helmChartPath = "./helm-chart/${env.HELM_CHART_DIR}"
                        def imageTag = imageTags[svc]
                        def imageName = "${env.DOCKER_USER}/${services[svc]['helmName']}:${imageTag}"

                        echo "Deploying ${svc} with image tag ${imageTag} into namespace ${env.DEPLOY_NAMESPACE}"

                        // Helm upgrade --install
                        sh """
                            helm upgrade --install ${helmReleaseName} ${helmChartPath} \
                            --namespace ${env.DEPLOY_NAMESPACE} \
                            --set image.repository=${env.DOCKER_USER}/${services[svc]['helmName']} \
                            --set image.tag=${imageTag} \
                            --wait
                        """
                    }

                    // In ra thông tin domain:port theo dạng NodePort
                    echo "Getting NodePort information for services in namespace ${env.DEPLOY_NAMESPACE}:"
                    for (svc in services.keySet()) {
                        // Giả định service tên theo helmName, kiểu NodePort cổng 30000+
                        def serviceName = services[svc]['helmName']
                        def nodePort = sh(
                            script: "kubectl get svc ${serviceName} -n ${env.DEPLOY_NAMESPACE} -o jsonpath='{.spec.ports[0].nodePort}' || echo 'NotFound'",
                            returnStdout: true
                        ).trim()
                        if (nodePort != 'NotFound') {
                            echo "- Service ${serviceName}: http://<node-ip>:${nodePort}"
                        } else {
                            echo "- Service ${serviceName} not found or not exposed"
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up credentials and logout from Docker if necessary."
            sh "docker logout || true"
        }
    }
}
