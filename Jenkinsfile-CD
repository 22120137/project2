pipeline {
    agent any

    environment {
        HELM_RELEASE = "petclinic"
        HELM_CHART_REPO = "https://github.com/HCMUS-DevOps-Projects/project02-k8s.git"
        HELM_CHART_DIR = "helm-chart/charts"
        DEFAULT_NAMESPACE_PREFIX = "dev-review"
        GIT_REPO_CODE = "https://github.com/HCMUS-DevOps-Projects/project02.git"
        DOCKER_USER = "tlvu2004"
        KUBECONFIG = '/var/lib/jenkins/.kube/config'
    }

    stages {
        stage('Clone Helm Chart Repository') {
            steps {
                sh "rm -rf helm-chart"
                sh "git clone ${env.HELM_CHART_REPO} helm-chart"
            }
        }

        stage('Clone Application Source Code Repository') {
            steps {
                dir('source-code') {
                    deleteDir()
                    sh "git clone ${env.GIT_REPO_CODE} ."
                }
            }
        }

        stage('Generate values.yaml') {
            steps {
                script {
                    def values = """
global:
  namespace: ${namespace}

services:
  api-gateway:
    image:
      tag: ${getTag("api-gateway", params.api_gateway)}
      echo "tag: ${getTag("api-gateway", params.api_gateway)}"
    ingress:
      host: petclinic-${namespace}.com


  config-server:
    image:
      tag: ${getTag("config-server", params.config_server)}

  customers-service:
    image:
      tag: ${getTag("customers-service", params.customers_service)}

  discovery-server:
    image:
      tag: ${getTag("discovery-server", params.discovery_server)}

  vets-service:
    image:
      tag: ${getTag("vets-service", params.vets_service)}
      echo "tag: ${getTag("vets-service", params.vets_service)}"

  visits-service:
    image:
      tag: ${getTag("visits-service", params.visits_service)}
      echo "tag: ${getTag("visits-service", params.visits_service)}"
"""

                    writeFile file: "helm-chart/environments/dev-review/values-${namespace}.yaml", text: values
                    echo "Generated values-${namespace}.yaml"
                }
            }
        }
        stage('Verify Kubernetes Access') {
            steps {
                sh '''
                    echo "Using kubeconfig: $KUBECONFIG"
                    kubectl cluster-info
                    kubectl get nodes
                '''
            }
        }
        stage('Deploy to Kubernetes') {
           
            // when {
            //     expression { return params.DEPLOY_NAMESPACE != null }
            // }
            steps {
                echo "âœ… DEPLOY_NAMESPACE = '${params.namespace}'"
                echo "âœ… HELM_RELEASE = '${env.HELM_RELEASE}'"
                script {
                    def namespace = params.namespace.trim()
                    sh """
                        cd helm-chart
                        kubectl get namespace ${namespace} || kubectl create namespace ${namespace}
                        helm upgrade --install ${env.HELM_RELEASE}-${namespace} . \
                        -f environments/dev-review/values-${namespace}.yaml \
                        --namespace ${namespace} --create-namespace 
                    """
                }
            }
        }
    }

    post {
        always {
            echo "ðŸ§¹ Cleanup..."
            sh "docker logout || true"
        }
    }
}

def getTag(serviceName, branch) {
    if (branch == "main") return "latest"

    def commit = sh(
        script: "cd source-code && git fetch origin ${branch} && git rev-parse origin/${branch}",
        returnStdout: true
    ).trim()

    return commit.take(7) 
}
